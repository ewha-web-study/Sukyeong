* JavaScript

- HTML와는 다르게 매우 동적인 JS
Ex. 1+1의 출력
-> HTML: 1+1
-> Js: 2

trim: 공백 없애기
indexOf: 인덱스 찾기
toUpperCase: 문자열의 문자들 대문자로 바꾸기

- css
<style></style> -> 사이의 코드가 CSS코드임을 명시함
div: 무색무취의 태그. 줄바꿈 생김
span: div와 같은 기능, 줄바꿈 안 생김
Ex. <span class="js">
head의 <style></style> 사이에
.js{
  font-weight:bold;
 }
 => js 클래스의 글씨를 두껍게
 -> .: class, #: id, none: tag
 -> tag<class<id 순으로 우선순위

- Js
<script></script> -> 사이의 코드가 js코드임을 명시함
document.write(): ()안의 값 출력
document.querySelector('body'): body 태그 선택
document.querySelector('#id'): id 선택

- 비교 연산자
Java나 C 등의 언어와 다르게 '==='가 비교 연산자(=가 3개)
&lt; = "<"

- 반복문

- 리팩토링
반복되는 부분이 있다면 최대한 줄이는 방향으로 코드 작성할 것
Ex. onclick의 대상이 그 태그안의 요소라면 -> this 키워드 사용
Ex. document.querySelector('body')가 반복되는 경우
=> var target = document.querySelector('body')
=> 변수 선언 이후로는 document.querySelector('body')를 target으로 줄여 쓸 수 있음.

- 배열
push: 배열에 원소 추가

- 함수

- 객체
객체: {}
배열: []
객체안의 요소값: {"key: value"}
객체에 원소를 추가할 때
1) key 이름에 띄어쓰기가 없는 경우
-> 배열명.key = '이름';
2) key 이름에 띄어쓰기가 있는 경우
-> 배열명["key"]='이름';

- 파일
리팩토링에서 함수만큼 중요한 역할을 함
<script src=""></script>

- 라이브러리 vs 프레임워크
라이브러리: 개발자가 필요할 때마다 꺼내쓰는 도구
프레임워크: 개발자가 개발을 하기 위해 접속하는 환경

대표적인 라이브러리: jQuery -> $
Ex. $('a') => 어떤 코드에 있는 모든 a 태그를 jQuery로 제어한다
